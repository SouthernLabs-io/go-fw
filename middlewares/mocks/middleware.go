// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	"github.com/southernlabs-io/go-fw/core"
	middlewares "github.com/southernlabs-io/go-fw/middlewares"

	mock "github.com/stretchr/testify/mock"
)

// Middleware is an autogenerated mock type for the Middleware type
type Middleware struct {
	mock.Mock
}

type Middleware_Expecter struct {
	mock *mock.Mock
}

func (_m *Middleware) EXPECT() *Middleware_Expecter {
	return &Middleware_Expecter{mock: &_m.Mock}
}

// GetLogger provides a mock function with given fields:
func (_m *Middleware) GetLogger() core.Logger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogger")
	}

	var r0 core.Logger
	if rf, ok := ret.Get(0).(func() core.Logger); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(core.Logger)
	}

	return r0
}

// Middleware_GetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogger'
type Middleware_GetLogger_Call struct {
	*mock.Call
}

// GetLogger is a helper method to define mock.On call
func (_e *Middleware_Expecter) GetLogger() *Middleware_GetLogger_Call {
	return &Middleware_GetLogger_Call{Call: _e.mock.On("GetLogger")}
}

func (_c *Middleware_GetLogger_Call) Run(run func()) *Middleware_GetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Middleware_GetLogger_Call) Return(_a0 core.Logger) *Middleware_GetLogger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Middleware_GetLogger_Call) RunAndReturn(run func() core.Logger) *Middleware_GetLogger_Call {
	_c.Call.Return(run)
	return _c
}

// Priority provides a mock function with given fields:
func (_m *Middleware) Priority() middlewares.MiddlewarePriority {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Priority")
	}

	var r0 middlewares.MiddlewarePriority
	if rf, ok := ret.Get(0).(func() middlewares.MiddlewarePriority); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(middlewares.MiddlewarePriority)
	}

	return r0
}

// Middleware_Priority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Priority'
type Middleware_Priority_Call struct {
	*mock.Call
}

// Priority is a helper method to define mock.On call
func (_e *Middleware_Expecter) Priority() *Middleware_Priority_Call {
	return &Middleware_Priority_Call{Call: _e.mock.On("Priority")}
}

func (_c *Middleware_Priority_Call) Run(run func()) *Middleware_Priority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Middleware_Priority_Call) Return(_a0 middlewares.MiddlewarePriority) *Middleware_Priority_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Middleware_Priority_Call) RunAndReturn(run func() middlewares.MiddlewarePriority) *Middleware_Priority_Call {
	_c.Call.Return(run)
	return _c
}

// Setup provides a mock function with given fields: httpHandler
func (_m *Middleware) Setup(httpHandler core.HTTPHandler) {
	_m.Called(httpHandler)
}

// Middleware_Setup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup'
type Middleware_Setup_Call struct {
	*mock.Call
}

// Setup is a helper method to define mock.On call
//   - httpHandler core.HTTPHandler
func (_e *Middleware_Expecter) Setup(httpHandler interface{}) *Middleware_Setup_Call {
	return &Middleware_Setup_Call{Call: _e.mock.On("Setup", httpHandler)}
}

func (_c *Middleware_Setup_Call) Run(run func(httpHandler core.HTTPHandler)) *Middleware_Setup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.HTTPHandler))
	})
	return _c
}

func (_c *Middleware_Setup_Call) Return() *Middleware_Setup_Call {
	_c.Call.Return()
	return _c
}

func (_c *Middleware_Setup_Call) RunAndReturn(run func(core.HTTPHandler)) *Middleware_Setup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMiddleware creates a new instance of Middleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *Middleware {
	mock := &Middleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
