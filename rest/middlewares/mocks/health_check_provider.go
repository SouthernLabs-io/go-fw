// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import "github.com/stretchr/testify/mock"

// HealthCheckProvider is an autogenerated mock type for the HealthCheckProvider type
type HealthCheckProvider struct {
	mock.Mock
}

type HealthCheckProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *HealthCheckProvider) EXPECT() *HealthCheckProvider_Expecter {
	return &HealthCheckProvider_Expecter{mock: &_m.Mock}
}

// GetName provides a mock function with given fields:
func (_m *HealthCheckProvider) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HealthCheckProvider_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type HealthCheckProvider_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *HealthCheckProvider_Expecter) GetName() *HealthCheckProvider_GetName_Call {
	return &HealthCheckProvider_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *HealthCheckProvider_GetName_Call) Run(run func()) *HealthCheckProvider_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HealthCheckProvider_GetName_Call) Return(_a0 string) *HealthCheckProvider_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HealthCheckProvider_GetName_Call) RunAndReturn(run func() string) *HealthCheckProvider_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function with given fields:
func (_m *HealthCheckProvider) HealthCheck() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HealthCheckProvider_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type HealthCheckProvider_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
func (_e *HealthCheckProvider_Expecter) HealthCheck() *HealthCheckProvider_HealthCheck_Call {
	return &HealthCheckProvider_HealthCheck_Call{Call: _e.mock.On("HealthCheck")}
}

func (_c *HealthCheckProvider_HealthCheck_Call) Run(run func()) *HealthCheckProvider_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HealthCheckProvider_HealthCheck_Call) Return(_a0 error) *HealthCheckProvider_HealthCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HealthCheckProvider_HealthCheck_Call) RunAndReturn(run func() error) *HealthCheckProvider_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// NewHealthCheckProvider creates a new instance of HealthCheckProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHealthCheckProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *HealthCheckProvider {
	mock := &HealthCheckProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
