// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	"github.com/gin-gonic/gin"

	"github.com/stretchr/testify/mock"
)

// AuthZProvider is an autogenerated mock type for the AuthZProvider type
type AuthZProvider struct {
	mock.Mock
}

type AuthZProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthZProvider) EXPECT() *AuthZProvider_Expecter {
	return &AuthZProvider_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function with given fields: ctx, args
func (_m *AuthZProvider) Authorize(ctx *gin.Context, args ...interface{}) (bool, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, ...interface{}) (bool, error)); ok {
		return rf(ctx, args...)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, ...interface{}) bool); ok {
		r0 = rf(ctx, args...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, ...interface{}) error); ok {
		r1 = rf(ctx, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthZProvider_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type AuthZProvider_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - ctx *gin.Context
//   - args ...interface{}
func (_e *AuthZProvider_Expecter) Authorize(ctx interface{}, args ...interface{}) *AuthZProvider_Authorize_Call {
	return &AuthZProvider_Authorize_Call{Call: _e.mock.On("Authorize",
		append([]interface{}{ctx}, args...)...)}
}

func (_c *AuthZProvider_Authorize_Call) Run(run func(ctx *gin.Context, args ...interface{})) *AuthZProvider_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(*gin.Context), variadicArgs...)
	})
	return _c
}

func (_c *AuthZProvider_Authorize_Call) Return(_a0 bool, _a1 error) *AuthZProvider_Authorize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthZProvider_Authorize_Call) RunAndReturn(run func(*gin.Context, ...interface{}) (bool, error)) *AuthZProvider_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthZProvider creates a new instance of AuthZProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthZProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthZProvider {
	mock := &AuthZProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
