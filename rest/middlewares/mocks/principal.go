// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	"github.com/stretchr/testify/mock"

	"github.com/southernlabs-io/go-fw/rest/middlewares"
)

// Principal is an autogenerated mock type for the Principal type
type Principal struct {
	mock.Mock
}

type Principal_Expecter struct {
	mock *mock.Mock
}

func (_m *Principal) EXPECT() *Principal_Expecter {
	return &Principal_Expecter{mock: &_m.Mock}
}

// GetEmail provides a mock function with given fields:
func (_m *Principal) GetEmail() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEmail")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Principal_GetEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmail'
type Principal_GetEmail_Call struct {
	*mock.Call
}

// GetEmail is a helper method to define mock.On call
func (_e *Principal_Expecter) GetEmail() *Principal_GetEmail_Call {
	return &Principal_GetEmail_Call{Call: _e.mock.On("GetEmail")}
}

func (_c *Principal_GetEmail_Call) Run(run func()) *Principal_GetEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Principal_GetEmail_Call) Return(_a0 string) *Principal_GetEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Principal_GetEmail_Call) RunAndReturn(run func() string) *Principal_GetEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with given fields:
func (_m *Principal) GetID() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Principal_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type Principal_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *Principal_Expecter) GetID() *Principal_GetID_Call {
	return &Principal_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *Principal_GetID_Call) Run(run func()) *Principal_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Principal_GetID_Call) Return(_a0 interface{}) *Principal_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Principal_GetID_Call) RunAndReturn(run func() interface{}) *Principal_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *Principal) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Principal_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type Principal_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *Principal_Expecter) GetName() *Principal_GetName_Call {
	return &Principal_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *Principal_GetName_Call) Run(run func()) *Principal_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Principal_GetName_Call) Return(_a0 string) *Principal_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Principal_GetName_Call) RunAndReturn(run func() string) *Principal_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetType provides a mock function with given fields:
func (_m *Principal) GetType() middlewares.PrincipalType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetType")
	}

	var r0 middlewares.PrincipalType
	if rf, ok := ret.Get(0).(func() middlewares.PrincipalType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(middlewares.PrincipalType)
	}

	return r0
}

// Principal_GetType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetType'
type Principal_GetType_Call struct {
	*mock.Call
}

// GetType is a helper method to define mock.On call
func (_e *Principal_Expecter) GetType() *Principal_GetType_Call {
	return &Principal_GetType_Call{Call: _e.mock.On("GetType")}
}

func (_c *Principal_GetType_Call) Run(run func()) *Principal_GetType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Principal_GetType_Call) Return(_a0 middlewares.PrincipalType) *Principal_GetType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Principal_GetType_Call) RunAndReturn(run func() middlewares.PrincipalType) *Principal_GetType_Call {
	_c.Call.Return(run)
	return _c
}

// NewPrincipal creates a new instance of Principal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPrincipal(t interface {
	mock.TestingT
	Cleanup(func())
}) *Principal {
	mock := &Principal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
