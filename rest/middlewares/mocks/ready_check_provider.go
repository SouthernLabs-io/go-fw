// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import "github.com/stretchr/testify/mock"

// ReadyCheckProvider is an autogenerated mock type for the ReadyCheckProvider type
type ReadyCheckProvider struct {
	mock.Mock
}

type ReadyCheckProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *ReadyCheckProvider) EXPECT() *ReadyCheckProvider_Expecter {
	return &ReadyCheckProvider_Expecter{mock: &_m.Mock}
}

// GetName provides a mock function with given fields:
func (_m *ReadyCheckProvider) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReadyCheckProvider_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type ReadyCheckProvider_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *ReadyCheckProvider_Expecter) GetName() *ReadyCheckProvider_GetName_Call {
	return &ReadyCheckProvider_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *ReadyCheckProvider_GetName_Call) Run(run func()) *ReadyCheckProvider_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadyCheckProvider_GetName_Call) Return(_a0 string) *ReadyCheckProvider_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReadyCheckProvider_GetName_Call) RunAndReturn(run func() string) *ReadyCheckProvider_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// ReadyCheck provides a mock function with given fields:
func (_m *ReadyCheckProvider) ReadyCheck() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadyCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadyCheckProvider_ReadyCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadyCheck'
type ReadyCheckProvider_ReadyCheck_Call struct {
	*mock.Call
}

// ReadyCheck is a helper method to define mock.On call
func (_e *ReadyCheckProvider_Expecter) ReadyCheck() *ReadyCheckProvider_ReadyCheck_Call {
	return &ReadyCheckProvider_ReadyCheck_Call{Call: _e.mock.On("ReadyCheck")}
}

func (_c *ReadyCheckProvider_ReadyCheck_Call) Run(run func()) *ReadyCheckProvider_ReadyCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadyCheckProvider_ReadyCheck_Call) Return(_a0 error) *ReadyCheckProvider_ReadyCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReadyCheckProvider_ReadyCheck_Call) RunAndReturn(run func() error) *ReadyCheckProvider_ReadyCheck_Call {
	_c.Call.Return(run)
	return _c
}

// NewReadyCheckProvider creates a new instance of ReadyCheckProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReadyCheckProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReadyCheckProvider {
	mock := &ReadyCheckProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
